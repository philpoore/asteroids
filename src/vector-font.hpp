#pragma once

#include <GLFW/glfw3.h>
#include <vector>
#include <map>

#include "v2.hpp"

typedef std::pair<v2, v2> Line;

std::map<char, std::vector<Line>> font = {
    { 'A' , {
        {{0, 0}, {0, 2}},
        {{0, 2}, {1, 3}},
        {{1, 3}, {2, 2}},
        {{2, 2}, {2, 0}},
        {{0, 1}, {2, 1}},
    }},
    { 'B', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {1, 3}},
        {{1, 3}, {1, 2}},
        {{1, 2}, {2, 1}},
        {{2, 1}, {1, 0}},
        {{1, 0}, {0, 0}},
        {{0, 2}, {1, 2}},
    }},
    { 'C', {
        {{2, 0}, {0, 0}},
        {{0, 0}, {0, 2}},
        {{0, 2}, {1, 3}},
        {{1, 3}, {2, 3}},
    }},
    { 'D', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {1, 3}},
        {{1, 3}, {2, 2}},
        {{2, 2}, {2, 1}},
        {{2, 1}, {1, 0}},
        {{1, 0}, {0, 0}},
    }},
    { 'E', {
        {{0, 0}, {0, 3}},
        {{0, 0}, {2, 0}},
        {{0, 2}, {1, 2}},
        {{0, 3}, {2, 3}},
    }},
    { 'F', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 3}},
        {{0, 2}, {1, 2}},
    }},
    { 'G', {
        {{2, 1}, {2, 0}},
        {{2, 0}, {0, 0}},
        {{0, 0}, {0, 2}},
        {{0, 2}, {1, 3}},
        {{1, 3}, {2, 3}},
    }},
    { 'H', {
        {{0, 0}, {0, 3}},
        {{2, 0}, {2, 3}},
        {{0, 2}, {2, 2}},
    }},
    { 'I', {
        {{0, 0}, {2, 0}},
        {{0, 3}, {2, 3}},
        {{1, 0}, {1, 3}},
    }},
    { 'J', {
        {{0, 0}, {1, 1}},
        {{1, 1}, {1, 3}},
        {{0, 3}, {2, 3}},
    }},
    { 'K', {
        {{0, 0}, {0, 3}},
        {{0, 2}, {2, 0}},
        {{0, 2}, {1, 3}},
    }},
    { 'L', {
        {{0, 3}, {0, 0}},
        {{0, 0}, {2, 0}},
    }},
    { 'M', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {1, 2}},
        {{1, 2}, {2, 3}},
        {{2, 3}, {2, 0}},
    }},
    { 'N', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 0}},
        {{2, 0}, {2, 3}},
    }},
    { 'O', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 3}},
        {{2, 3}, {2, 0}},
        {{2, 0}, {0, 0}},
    }},
    { 'P', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 3}},
        {{2, 3}, {2, 1}},
        {{2, 1}, {0, 1}},
    }},
    { 'Q', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 3}},
        {{2, 3}, {2, 0}},
        {{2, 0}, {0, 0}},
        {{0, 0}, {1, 1}},
    }},
    { 'R', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {1, 3}},
        {{1, 3}, {2, 2}},
        {{2, 2}, {1, 1}},
        {{1, 1}, {2, 0}},
        {{0, 1}, {1, 1}},
    }},
    { 'S', {
        {{0, 0}, {2, 0}},
        {{2, 0}, {2, 1}},
        {{2, 1}, {0, 1}},
        {{0, 1}, {0, 3}},
        {{0, 3}, {2, 3}},
    }},
    { 'T', {
        {{0, 3}, {2, 3}},
        {{1, 3}, {1, 0}},
    }},
    { 'U', {
        {{0, 3}, {0, 0}},
        {{0, 0}, {2, 0}},
        {{2, 0}, {2, 3}},
    }},
    { 'V', {
        {{0, 3}, {0, 1}},
        {{0, 1}, {1, 0}},
        {{1, 0}, {2, 1}},
        {{2, 1}, {2, 3}},
    }},
    { 'W', {
        {{0, 3}, {0, 0}},
        {{0, 0}, {1, 1}},
        {{1, 1}, {2, 0}},
        {{2, 0}, {2, 3}},
    }},
    { 'X', {
        {{0, 0}, {2, 3}},
        {{0, 3}, {2, 0}},
    }},
    { 'Y', {
        {{0, 3}, {1, 1}},
        {{1, 1}, {2, 3}},
        {{1, 1}, {1, 0}},
    }},
    { 'Z', {
        {{0, 3}, {2, 3}},
        {{2, 3}, {0, 0}},
        {{0, 0}, {2, 0}},
    }},
    { ' ', {

    }},
    { '-', {
        {{0, 1}, {2, 1}},
    }},
    { '.', {
        {{1, 0}, {2, 1}},
        {{2, 1}, {2, 0}},
        {{2, 0}, {1, 0}},
    }},



    { '0', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 3}},
        {{2, 3}, {2, 0}},
        {{2, 0}, {0, 0}},
    }},
    { '1', {
        {{0, 2}, {1, 3}},
        {{1, 3}, {1, 0}},
    }},
    { '2', {
        {{0, 3}, {2, 3}},
        {{2, 3}, {2, 2}},
        {{2, 2}, {0, 1}},
        {{0, 1}, {0, 0}},
        {{0, 0}, {2, 0}},
    }},
    { '3', {
        {{0, 0}, {2, 0}},
        {{2, 0}, {2, 3}},
        {{2, 3}, {0, 3}},
        {{1, 2}, {2, 2}},
    }},
    { '4', {
        {{0, 3}, {0, 1}},
        {{0, 1}, {2, 1}},
        {{1, 2}, {1, 0}},
    }},
    { '5', {
        {{0, 0}, {2, 0}},
        {{2, 0}, {2, 2}},
        {{2, 2}, {0, 2}},
        {{0, 2}, {0, 3}},
        {{0, 3}, {2, 3}},
    }},
    { '6', {
        {{2, 3}, {0, 3}},
        {{0, 3}, {0, 0}},
        {{0, 0}, {2, 0}},
        {{2, 0}, {2, 2}},
        {{2, 2}, {0, 2}},
    }},
    { '7', {
        {{0, 0}, {2, 3}},
        {{2, 3}, {0, 3}},
    }},
    { '8', {
        {{0, 0}, {0, 3}},
        {{0, 3}, {2, 3}},
        {{2, 3}, {2, 0}},
        {{2, 0}, {0, 0}},
        {{0, 2}, {2, 2}},
    }},
    { '9', {
        {{2, 0}, {2, 3}},
        {{2, 3}, {0, 3}},
        {{0, 3}, {0, 1}},
        {{0, 1}, {2, 1}},
    }},
};

void renderChar(int ix, int iy, char c, int size) {
    if (!font.count(c)) return;
    size /= 2;
    auto lines = font[c];
    glBegin(GL_LINES);
    for (auto& line : lines) {
        int x1 = ix + (line.first.x * size);
        int y1 = iy - (line.first.y * size);
        int x2 = ix + (line.second.x * size);
        int y2 = iy - (line.second.y * size);
        glVertex2f(x1, y1);
        glVertex2f(x2, y2);
    }
    glEnd();
}

void renderText(int ix, int iy, std::string text, int size) {
    for (char& c : text) {
        renderChar(ix, iy, c, size);
        ix += size + (size / 2);
    }
}